use strict;
use warnings;
use lib 'lib';
use Test::More;
use Vend::CIDR qw(cidr2regex);

test_cidr(
    ['10.0.0.0/24'],
    [qw(10.0.0.0 10.0.0.10 10.0.0.255)],
    [qw(11.1.10.10 0.0.0.0 10.0.1.255 255.255.255.255)],
);

test_cidr(
    ['66.66.0.0/16'],
    [qw(66.66.0.0 66.66.254.255 66.66.66.66)],
    [qw(11.1.10.10 0.0.0.0 10.0.1.255 255.255.255.255)],
);

test_cidr(
    ['10.0.0.0/24','10.1.0.0/24'],
    [qw(10.0.0.0 10.0.0.10 10.0.0.255 10.1.0.1)],
    [qw(11.1.10.10 0.0.0.0 10.0.1.255 10.1.1.1 255.255.255.255)],
);

test_cidr(
    ['8.8.8.8/32'],
    [qw(8.8.8.8)],
    [qw(11.1.10.10 0.0.0.0 10.0.1.255 10.1.1.1 255.255.255.255 8.8.8.9)],
);

test_cidr(
    ['1.2.0.0/7'],
    [qw(1.1.0.0 1.2.0.255 1.2.3.4 1.3.5.7)],
    [qw(2.2.1.1 255.255.0.0)],
);

test_cidr(
    ['1.2.0.0/15'],
    [qw(1.2.0.0 1.2.0.255 1.2.3.4 1.3.5.7)],
    [qw(1.1.0.0 2.2.1.1 255.255.0.0)],
);

done_testing();

sub test_cidr {
    my ($pats, $include, $exclude) = @_;

    my $pat = join '|' => map { cidr2regex($_) } @$pats;
    my $cidr = qr(^($pat)$);

    like  ($_, $cidr, "$_ matches cidr")       for @$include;
    unlike($_, $cidr, "$_ doesn't match cidr") for @$exclude;
}
